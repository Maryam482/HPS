[{"C:\\Users\\Student-PC\\Desktop\\saylaniwork\\HPS\\client\\src\\index.js":"1","C:\\Users\\Student-PC\\Desktop\\saylaniwork\\HPS\\client\\src\\reportWebVitals.js":"2","C:\\Users\\Student-PC\\Desktop\\saylaniwork\\HPS\\client\\src\\App.js":"3","C:\\Users\\Student-PC\\Desktop\\saylaniwork\\HPS\\client\\src\\components\\list\\List.js":"4","C:\\Users\\Student-PC\\Desktop\\saylaniwork\\HPS\\client\\src\\components\\Dialog.js":"5","C:\\Users\\Student-PC\\Desktop\\saylaniwork\\HPS\\client\\src\\components\\Stepper.js":"6","C:\\Users\\Student-PC\\Desktop\\saylaniwork\\HPS\\client\\src\\components\\service\\Service.js":"7","C:\\Users\\Student-PC\\Desktop\\saylaniwork\\HPS\\client\\src\\components\\register\\Register.js":"8","C:\\Users\\Student-PC\\Desktop\\saylaniwork\\HPS\\client\\src\\components\\welfare\\Welfare.js":"9","C:\\Users\\Student-PC\\Desktop\\saylaniwork\\HPS\\client\\src\\components\\Arrowheader.js":"10","C:\\Users\\Student-PC\\Desktop\\saylaniwork\\HPS\\client\\src\\components\\Icons\\Icons.js":"11","C:\\Users\\Student-PC\\Desktop\\saylaniwork\\HPS\\client\\src\\components\\welfare\\SubTable.js":"12"},{"size":517,"mtime":1614747766597,"results":"13","hashOfConfig":"14"},{"size":375,"mtime":1614747766597,"results":"15","hashOfConfig":"14"},{"size":215,"mtime":1614747766581,"results":"16","hashOfConfig":"14"},{"size":4885,"mtime":1615447903084,"results":"17","hashOfConfig":"14"},{"size":1459,"mtime":1615444886096,"results":"18","hashOfConfig":"14"},{"size":4749,"mtime":1615447202520,"results":"19","hashOfConfig":"14"},{"size":5493,"mtime":1615442106094,"results":"20","hashOfConfig":"14"},{"size":11650,"mtime":1615277230465,"results":"21","hashOfConfig":"14"},{"size":13884,"mtime":1615447421026,"results":"22","hashOfConfig":"14"},{"size":1746,"mtime":1615270671696,"results":"23","hashOfConfig":"14"},{"size":2210,"mtime":1615272249238,"results":"24","hashOfConfig":"14"},{"size":1726,"mtime":1615275492964,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1jtnje2",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"28"},"C:\\Users\\Student-PC\\Desktop\\saylaniwork\\HPS\\client\\src\\index.js",[],["59","60"],"C:\\Users\\Student-PC\\Desktop\\saylaniwork\\HPS\\client\\src\\reportWebVitals.js",[],"C:\\Users\\Student-PC\\Desktop\\saylaniwork\\HPS\\client\\src\\App.js",["61"],"import logo from './logo.svg';\r\nimport './App.css';\r\nimport List from './components/list/List.js'\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <List/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\Student-PC\\Desktop\\saylaniwork\\HPS\\client\\src\\components\\list\\List.js",["62","63","64","65","66","67"],"C:\\Users\\Student-PC\\Desktop\\saylaniwork\\HPS\\client\\src\\components\\Dialog.js",["68","69","70","71","72","73","74","75","76"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport HorizontalLinearStepper from './Stepper';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  appBar: {\r\n    position: 'relative',\r\n    backgroundColor: 'white'\r\n  },\r\n  title: {\r\n    marginLeft: theme.spacing(2),\r\n    flex: 1,\r\n  },\r\n}));\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nexport default function FormDialog({open, handleClose}) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div>\r\n      <Dialog fullScreen open={open} onClose={handleClose} TransitionComponent={Transition}>\r\n        <AppBar className={classes.appBar}>\r\n         <HorizontalLinearStepper handleClose={handleClose}/>\r\n        </AppBar>\r\n       \r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Student-PC\\Desktop\\saylaniwork\\HPS\\client\\src\\components\\Stepper.js",["77","78"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Stepper from '@material-ui/core/Stepper';\r\nimport Step from '@material-ui/core/Step';\r\nimport StepLabel from '@material-ui/core/StepLabel';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Register from './register/Register';\r\nimport Services from './service/Service';\r\nimport Welfare from './welfare/Welfare';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  button: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  instructions: {\r\n    marginTop: theme.spacing(1),\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nfunction getSteps() {\r\n  return ['Registeration', 'Welfare', 'Services'];\r\n}\r\n\r\nfunction getStepContent(step,handleBack,handleNext) {\r\n  switch (step) {\r\n    case 0:\r\n      return <Register back={handleBack} next={handleNext} />;\r\n    case 1:\r\n      return <Welfare  back={handleBack} next={handleNext} />;\r\n    case 2:\r\n      return <Services  back={handleBack} next={handleNext} />;\r\n    default:\r\n      return 'Unknown step';\r\n  }\r\n}\r\n\r\nexport default function HorizontalLinearStepper({handleClose}) {\r\n  const classes = useStyles();\r\n  const [activeStep, setActiveStep] = React.useState(0);\r\n  const [skipped, setSkipped] = React.useState(new Set());\r\n  const steps = getSteps();\r\n\r\n  const isStepOptional = (step) => {\r\n    return step === 1;\r\n  };\r\n\r\n  const isStepSkipped = (step) => {\r\n    return skipped.has(step);\r\n  };\r\n  const handleNext = () => {\r\n        let newSkipped = skipped;\r\n        if(activeStep == 2) {\r\n          handleClose()\r\n        } \r\n        if (isStepSkipped(activeStep)) {\r\n          newSkipped = new Set(newSkipped.values());\r\n          newSkipped.delete(activeStep);\r\n        }\r\n\r\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n    setSkipped(newSkipped);\r\n  };\r\n\r\n  const handleBack = () => {\r\n    if(activeStep==0){\r\n      handleClose()\r\n     } else{\r\n    setActiveStep((prevActiveStep) => prevActiveStep - 1);\r\n     }\r\n  };\r\n\r\n  const handleSkip = () => {\r\n    if (!isStepOptional(activeStep)) {\r\n      // You probably want to guard against something like this,\r\n      // it should never occur unless someone's actively trying to break something.\r\n      throw new Error(\"You can't skip a step that isn't optional.\");\r\n    }\r\n\r\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n    setSkipped((prevSkipped) => {\r\n      const newSkipped = new Set(prevSkipped.values());\r\n      newSkipped.add(activeStep);\r\n      return newSkipped;\r\n    });\r\n  };\r\n\r\n  const handleReset = () => {\r\n    setActiveStep(0);\r\n  };\r\n\r\n  return (\r\n   \r\n    <div className={classes.root}>\r\n      <Stepper activeStep={activeStep}>\r\n        {steps.map((label, index) => {\r\n          const stepProps = {};\r\n          const labelProps = {};\r\n          if (isStepOptional(index)) {\r\n            labelProps.optional = <Typography variant=\"caption\">Optional</Typography>;\r\n          }\r\n          if (isStepSkipped(index)) {\r\n            stepProps.completed = false;\r\n          }\r\n         \r\n          return (\r\n            <Step key={label} {...stepProps}>\r\n              <StepLabel {...labelProps}>{label}</StepLabel>\r\n            </Step>\r\n            \r\n          );\r\n          \r\n        })}\r\n         \r\n      </Stepper>\r\n      \r\n  \r\n      \r\n      <div>\r\n        \r\n        {activeStep === steps.length ? (\r\n          <div>\r\n            <Typography className={classes.instructions}>\r\n              All steps completed - you&apos;re finished\r\n            </Typography>\r\n            <Button onClick={handleReset} className={classes.button}>\r\n              Reset\r\n            </Button>\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <Typography className={classes.instructions}>{getStepContent(activeStep,handleBack,handleNext)}</Typography>\r\n            <div>\r\n              <Button disabled={activeStep === 0} onClick={handleBack} className={classes.button}>\r\n                Back\r\n              </Button>\r\n              {isStepOptional(activeStep) && (\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  onClick={handleSkip}\r\n                  className={classes.button}\r\n                >\r\n                  Skip\r\n                </Button>\r\n              )}\r\n\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={handleNext}\r\n                className={classes.button}\r\n              >\r\n                {activeStep === steps.length - 1 ? 'Finish' : 'Next'}\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}","C:\\Users\\Student-PC\\Desktop\\saylaniwork\\HPS\\client\\src\\components\\service\\Service.js",["79","80","81"],"import React, {useState} from 'react';\r\nimport ArrowHeader from '../Arrowheader'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {\r\n  TextField,\r\n  InputLabel,\r\n  Grid,\r\n  MenuItem,\r\n  Select,\r\n  FormControl,\r\n  Checkbox,\r\n  FormControlLabel,\r\n} from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n  },\r\n  selectEmpty: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nexport default function Register({back, next, title}) {\r\n  const classes = useStyles();\r\n  const [Header, setHeader] = useState({\r\n    TokenNo: \"\",\r\n    ServiceDate: new Date(),\r\n    MRNo: 'recID',\r\n    Ward: \"\",\r\n    Amount: \"\",\r\n    TotalAmount: \"\",\r\n    PatientContribution: \"\",\r\n    Remarks: \"\",\r\n    CreatedUser: \"Admin\",\r\n    ModifyUser: \"Admin\"\r\n});\r\nconst handleSubmit = () => {\r\n  console.log(Header)\r\n  next()\r\n}\r\n  return (\r\n    <div>\r\n    <ArrowHeader next={handleSubmit} back={back} title=\"Services\"  />\r\n    <div style={{ padding: 16, margin: 'auto', maxWidth: '80%', justifyContent:'center' }}>\r\n      \r\n      <Grid container>\r\n        <Grid sm={12}>\r\n          <Grid container spacing={4}>\r\n            <Grid item lg={7} sm={12}>\r\n              <Grid container spacing={2}>\r\n                <Grid item md={4} sm={12} lg={3}>\r\n                  <TextField value={Header.MRNo} id=\"MRNo\" fullWidth\r\n                    type=\"text\" disabled={true}\r\n                    label=\"M.R. #\"/>\r\n                </Grid>\r\n                <Grid item md={4} sm={12} lg={3}>\r\n                  <TextField value={Header.TokenNo} id=\"TokenNo\" type=\"text\" fullWidth\r\n                    onChange={(e) => setHeader({ ...Header, TokenNo: e.target.value })}\r\n                    label=\"Token No\"/>\r\n                </Grid>\r\n                <Grid item md={4} sm={12} lg={3}>\r\n                  <TextField id=\"ServiceDate\" label=\"Service Date\" type=\"date\"\r\n                    value={Header.ServiceDate} fullWidth\r\n                    onChange={(e) => setHeader({ ...Header, ServiceDate: e.target.value })}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}/>\r\n                </Grid>\r\n                <Grid item md={4} sm={12} lg={3}>\r\n                  <FormControl fullWidth>\r\n                    <InputLabel  id=\"demo-simple-select-helper-label\">Gender</InputLabel>\r\n                    <Select \r\n                      labelId=\"demo-simple-select-helper-label\"\r\n                      id=\"Gender\"\r\n                      value={Header.Gender}\r\n                      onChange={(e) => setHeader({ ...Header, Gender: e.target.value })}\r\n                    >\r\n                      <MenuItem value=\"male\">Male</MenuItem>\r\n                      <MenuItem value=\"female\">Female</MenuItem>\r\n                    </Select>\r\n                  </FormControl>\r\n                </Grid>\r\n                <Grid item md={4} sm={12} lg={3}>\r\n                  <FormControl fullWidth>\r\n                    <InputLabel  id=\"demo-simple-select-helper-label\">Ward</InputLabel>\r\n                    <Select \r\n                      labelId=\"demo-simple-select-helper-label\"\r\n                      id=\"Ward\"\r\n                      value={Header.Ward}\r\n                      onChange={(e) => setHeader({ ...Header, Ward: e.target.value })}\r\n                    >\r\n                      <MenuItem value=\"Ward #1\">Ward #1</MenuItem>\r\n                      <MenuItem value=\" Ward #2\">Ward #2</MenuItem>\r\n                      <MenuItem value=\"Ward #3\">Ward #3</MenuItem>\r\n                    </Select>\r\n                  </FormControl>\r\n                </Grid>\r\n                <Grid item md={4} sm={12} lg={3}>\r\n                  <TextField value={Header.Amount} id=\"Amount\" type=\"number\" fullWidth\r\n                    onChange={(e) => setHeader({ ...Header, Amount: e.target.value })}\r\n                    label=\"Amount\"/>\r\n                </Grid>\r\n                <Grid item md={4} sm={12} lg={3}>\r\n                  <TextField value={Header.TotalAmount} id=\"TotalAmount\" type=\"number\" fullWidth\r\n                    onChange={(e) => setHeader({ ...Header, TotalAmount: e.target.value })}\r\n                    label=\"Total Amount\"/>\r\n                </Grid>\r\n                <Grid item md={4} sm={12} lg={3}>\r\n                  <TextField value={Header.PatientContribution} id=\"PatientContribution\" type=\"text\" fullWidth\r\n                    onChange={(e) => setHeader({ ...Header, PatientContribution: e.target.value })}\r\n                    label=\"Patient Contribution\"/>\r\n                </Grid>\r\n                <Grid item md={8} sm={12} lg={6}>\r\n                  <TextField value={Header.Remarks} id=\"Remarks\" type=\"text\" fullWidth\r\n                    onChange={(e) => setHeader({ ...Header, Remarks: e.target.value })}\r\n                    label=\"Remarks\"/>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item lg={1}/>\r\n            <Grid item lg={4} sm={12}>\r\n              <Grid container spacing={2}>\r\n                <Grid item md={6} sm={12} lg={6}>\r\n                  <TextField value={Header.TokenNo} id=\"TokenNo\" type=\"text\" fullWidth\r\n                    // onChange={(e) => setHeader({ ...Header, MaleKids: e.target.value })}\r\n                    label=\"Token No\" disabled={true}/>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid> \r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n","C:\\Users\\Student-PC\\Desktop\\saylaniwork\\HPS\\client\\src\\components\\register\\Register.js",["82","83","84"],"import React, {useState} from 'react';\r\nimport ArrowHeader from '../Arrowheader'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {\r\n  TextField,\r\n  InputLabel,\r\n  Grid,\r\n  MenuItem,\r\n  Select,\r\n  FormControl,\r\n  Checkbox,\r\n  FormControlLabel,\r\n  Button\r\n} from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n  },\r\n  selectEmpty: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nexport default function Register({back,next}) {\r\n  const classes = useStyles();\r\n  const [options,setOptions] = useState([{val: false, opt: 'Welfare'}])\r\n  const[err, setErr] = useState('')\r\n  const [Header, setHeader] = useState({\r\n    MRNo: \"\",\r\n    TokenNo: \"\",\r\n    RegistrationDate: new Date(),\r\n    Name: \"\",\r\n    FatherOrHusband: \"\",\r\n    DOB: new Date(),\r\n    Age: \"\",\r\n    Gender: \"\",\r\n    Religion: \"\",\r\n    District: \"\",\r\n    City: \"\",\r\n    Area: \"\",\r\n    HousNo: \"\",\r\n    Address: \"\",\r\n    CNIC: \"\",\r\n    Phone: \"\",\r\n    OffPhone: \"\",\r\n    Mobile: \"\",\r\n    RefBy: \"\",\r\n    Remarks: \"\",\r\n    IsRejected: false,\r\n    IsZakat: false,\r\n    IsPAFEmp: false,\r\n    MonthlyConsLimit: 0,\r\n    ThumbImage: \"\",\r\n    NOY: \"\",\r\n    EmpID: \"\",\r\n    IsStaff: false,\r\n    CreateUser: \"\",\r\n    ModifyUser: \"\",\r\n    CreateDate: \"\",\r\n    ModifyDate: \"\"\r\n});\r\n\r\n  const handleOption = (val) => {\r\n    console.log(val)\r\n    if (val == 'islam') {\r\n      setOptions([...options, 'zakaat', {val: true, opt: 'Zakaat'}])\r\n    }\r\n  }\r\n  const validate = () => {\r\n    let errors = {};\r\n    if (!Header.TokenNo) {\r\n      errors.TokenNo = 'TokenNo is required';\r\n    }\r\n    return errors;\r\n  };\r\n    // setErr('jjj')\r\n    // Object.keys(Header).map(function(key, index) {\r\n    //   console.log(Header[key])\r\n\r\n  //     if (Header.Address === \"\") {\r\n  //       console.log(err)\r\n  //       // return false;\r\n  //     }\r\n\r\n  // }\r\n  \r\n  const handleSubmit = () => {\r\n    validate();\r\n    console.log(err)\r\n    console.log(Header);\r\n    next()\r\n  }\r\n\r\n  return (\r\n    <div>\r\n    <ArrowHeader next={handleSubmit} back={back} title=\"Registration\"/>\r\n    <div style={{ padding: 16, margin: 'auto', maxWidth: '80%', justifyContent:'center' }}>\r\n      <Grid container spacing={2}>\r\n        <Grid item md={4} sm={12} lg={3}>\r\n          <TextField value={Header.MRNo} id=\"MRNo\" fullWidth\r\n            type=\"text\" disabled={true}\r\n            label=\"M.R. #\"/>\r\n        </Grid>\r\n        <Grid item md={4} sm={12} lg={3}>\r\n          <TextField value={Header.TokenNo || ''} id=\"TokenNo\" type=\"text\" fullWidth\r\n            onChange={(e) => setHeader({ ...Header, TokenNo: e.target.value })}\r\n            label=\"TokenNo\"/>\r\n        </Grid>\r\n        <Grid item md={4} sm={12} lg={3}>\r\n          <TextField id=\"RegistrationDate\" label=\"Registration Date\" type=\"date\"\r\n            value={Header.RegistrationDate} fullWidth\r\n            onChange={(e) => setHeader({ ...Header, RegistrationDate: e.target.value })}\r\n            InputLabelProps={{\r\n              shrink: true,\r\n            }}/>\r\n        </Grid>\r\n        <Grid item md={4} sm={12} lg={3}>\r\n          <TextField value={Header.Name} id=\"Name\" type=\"text\" fullWidth\r\n            onChange={(e) => setHeader({ ...Header, Name: e.target.value })}\r\n            label=\"Name\"/>\r\n        </Grid>\r\n        <Grid item md={4} sm={12} lg={3}>\r\n          <TextField value={Header.FatherOrHusband} id=\"FatherOrHusband\" type=\"text\" fullWidth\r\n            onChange={(e) => setHeader({ ...Header, FatherOrHusband: e.target.value })}\r\n            label=\"Father Name\"/>\r\n        </Grid>\r\n        <Grid item md={4} sm={12} lg={3}>\r\n          <TextField id=\"DOB\" label=\"Date of Birth\" type=\"date\"\r\n            value={Header.DOB} fullWidth\r\n            onChange={(e) => setHeader({ ...Header, DOB: e.target.value })}\r\n            InputLabelProps={{\r\n              shrink: true,\r\n            }}/>\r\n        </Grid>\r\n        <Grid item md={4} sm={12} lg={3}>\r\n          <TextField value={Header.Age} id=\"Age\" type=\"number\" fullWidth\r\n            onChange={(e) => setHeader({ ...Header, Age: e.target.value })}\r\n            label=\"Age\"/>\r\n        </Grid>\r\n        <Grid item md={4} sm={12} lg={3}>\r\n          <FormControl fullWidth>\r\n            <InputLabel  id=\"demo-simple-select-helper-label\">Gender</InputLabel>\r\n            <Select \r\n              labelId=\"demo-simple-select-helper-label\"\r\n              id=\"Gender\"\r\n              value={Header.Gender}\r\n              onChange={(e) => setHeader({ ...Header, Gender: e.target.value })}\r\n            >\r\n              <MenuItem value=\"male\">Male</MenuItem>\r\n              <MenuItem value=\"female\">Female</MenuItem>\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n        <Grid item md={4} sm={12} lg={3}>\r\n          <FormControl fullWidth>\r\n            <InputLabel id=\"demo-simple-select-helper-label\">Religion</InputLabel>\r\n            <Select\r\n              labelId=\"demo-simple-select-helper-label\"\r\n              id=\"Religion\"\r\n              value={Header.Religion}\r\n              onChange={ (e) => {\r\n                handleOption(e.target.value)\r\n                setHeader({ ...Header, Religion: e.target.value })\r\n              }\r\n              }>\r\n              <MenuItem value=\"islam\">Islam</MenuItem>\r\n              <MenuItem value=\"christian\">Christian</MenuItem>\r\n              <MenuItem value=\"other\">Other</MenuItem>\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n        <Grid item md={4} sm={12} lg={3}>\r\n          <FormControl fullWidth>\r\n            <InputLabel id=\"demo-simple-select-helper-label\">IsZakat</InputLabel>\r\n            <Select\r\n              labelId=\"demo-simple-select-helper-label\"\r\n              id=\"IsZakat\"\r\n              value={Header.IsZakat}\r\n              onChange={(e) => setHeader({ ...Header, IsZakat: e.target.value })}\r\n            >\r\n              {\r\n                options.map(( item ) => (\r\n                  <MenuItem value={item.val}>{item.opt}</MenuItem>\r\n                ))\r\n              }\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n        <Grid item md={4} sm={12} lg={3}>\r\n          <TextField value={Header.CNIC} id=\"CNIC\" type=\"number\" fullWidth\r\n            onChange={(e) => setHeader({ ...Header, CNIC: e.target.value })}\r\n            label=\"CNIC\"/>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Grid container>\r\n        <Grid sm={12}>\r\n          <Grid container spacing={2}>\r\n            <Grid item md={4} sm={12} lg={3}>\r\n              <TextField value={Header.HousNo} id=\"HousNo\" type=\"text\" fullWidth\r\n                onChange={(e) => setHeader({ ...Header, HousNo: e.target.value })}\r\n                label=\"HousNo\"/>\r\n            </Grid>\r\n            <Grid item md={4} sm={12} lg={3}>\r\n              <TextField value={Header.Address} id=\"Address\" type=\"text\" fullWidth\r\n                onChange={(e) => setHeader({ ...Header, Address: e.target.value })}\r\n                label=\"Address\"/>\r\n            </Grid>\r\n            <Grid item md={4} sm={12} lg={3}>\r\n              <TextField value={Header.Area} id=\"Area\" type=\"text\" fullWidth\r\n                onChange={(e) => setHeader({ ...Header, Area: e.target.value })}\r\n                label=\"Area\"/>\r\n            </Grid>\r\n            <Grid item md={4} sm={12} lg={3}>\r\n              <TextField value={Header.District} id=\"District\" type=\"text\" fullWidth\r\n                onChange={(e) => setHeader({ ...Header, District: e.target.value })}\r\n                label=\"District\"/>\r\n            </Grid>\r\n            <Grid item md={4} sm={12} lg={3}>\r\n              <TextField value={Header.City} id=\"City\" type=\"text\" fullWidth\r\n                onChange={(e) => setHeader({ ...Header, City: e.target.value })}\r\n                label=\"City\"/>\r\n            </Grid>\r\n            <Grid item md={4} sm={12} lg={3}>\r\n              <TextField value={Header.Phone} id=\"Phone\" type=\"number\" fullWidth\r\n                onChange={(e) => setHeader({ ...Header, Phone: e.target.value })}\r\n                label=\"Phone\"/>\r\n            </Grid>\r\n            <Grid item md={4} sm={12} lg={3}>\r\n              <TextField value={Header.OffPhone} id=\"OffPhone\" type=\"number\" fullWidth\r\n                onChange={(e) => setHeader({ ...Header, OffPhone: e.target.value })}\r\n                label=\"Office Phone\"/>\r\n            </Grid>\r\n            <Grid item md={4} sm={12} lg={3}>\r\n              <TextField value={Header.Mobile} id=\"Mobile\" type=\"number\" fullWidth\r\n                onChange={(e) => setHeader({ ...Header, Mobile: e.target.value })}\r\n                label=\"Mobile\"/>\r\n            </Grid>\r\n            <Grid item md={4} sm={12} lg={3}>\r\n              <TextField value={Header.MonthlyConsLimit} id=\"MonthlyConsLimit\" type=\"number\" fullWidth\r\n                onChange={(e) => setHeader({ ...Header, MonthlyConsLimit: e.target.value })}\r\n                label=\"Monthly Consumtion Limit\"/>\r\n            </Grid>  \r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n      <br />\r\n      \r\n      <Grid container>\r\n        <Grid sm={12}>\r\n          <Grid container spacing={2}>\r\n              <Grid item md={4} sm={12} lg={3}>\r\n                <TextField value={Header.RefBy} id=\"RefBy\" type=\"text\" fullWidth\r\n                  onChange={(e) => setHeader({ ...Header, RefBy: e.target.value })}\r\n                  label=\"Refered By\"/>\r\n              </Grid>\r\n              <Grid item md={4} sm={12}  lg={3}>\r\n                <TextField value={Header.EmpID} id=\"EmpID\" type=\"text\" fullWidth\r\n                  onChange={(e) => setHeader({ ...Header, EmpID: e.target.value })}\r\n                  label=\"Employee ID\"/>\r\n              </Grid>\r\n              <Grid item md={4} sm={12}  lg={3}>\r\n                <TextField value={Header.NOY} id=\"NOY\" type=\"text\" fullWidth\r\n                  onChange={(e) => setHeader({ ...Header, NOY: e.target.value })}\r\n                  label=\"NOY\"/>\r\n              </Grid>\r\n              <Grid item md={4} sm={12}  lg={6}>\r\n                <TextField value={Header.Remarks} id=\"Remarks\" type=\"text\" fullWidth\r\n                  onChange={(e) => setHeader({ ...Header, Remarks: e.target.value })}\r\n                  label=\"Remarks\"/>\r\n              </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Grid container>\r\n          <Grid col={12}>\r\n            <Grid container spacing={2} style={{marginTop:'3%'}}>\r\n              <Grid item md={4} sm={12}>\r\n                <FormControlLabel color=\"primary\" fullWidth\r\n                control={<Checkbox checked={Header.IsPAFEmp} name=\"Is PAF Employee\"\r\n                onChange={e => setHeader({ ...Header, IsPAFEmp: !Header.IsPAFEmp })} />}\r\n                label=\"Is PAF Employee\"\r\n              />\r\n              </Grid>\r\n              <Grid item md={4} sm={12}>\r\n                <FormControlLabel color=\"primary\" fullWidth\r\n                  control={<Checkbox checked={Header.IsStaff} name=\"Is Staff\" \r\n                  onChange={e => setHeader({ ...Header, IsStaff: !Header.IsStaff })} />}\r\n                  label=\"Is Staff\"\r\n                />\r\n              </Grid>\r\n              <Grid item md={4} sm={12}>\r\n                <FormControlLabel color=\"primary\"\r\n                  control={<Checkbox checked={Header.IsRejected} name=\"Is Rejected\" fullWidth\r\n                  onChange={e => setHeader({ ...Header, IsRejected: !Header.IsRejected })} />}\r\n                  label=\"Is Rejected\"\r\n                />\r\n              </Grid>                  \r\n            </Grid>\r\n          </Grid>\r\n      </Grid>\r\n      <Button onClick={handleSubmit} style={{color:\"black\", backgroundColor: \"rgb(3, 78, 162)\"}}>Submit</Button>\r\n    </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n","C:\\Users\\Student-PC\\Desktop\\saylaniwork\\HPS\\client\\src\\components\\welfare\\Welfare.js",["85","86","87","88","89","90","91"],"import React, {useState} from 'react';\r\nimport ArrowHeader from '../Arrowheader';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {\r\n  TextField,\r\n  InputLabel,\r\n  Grid,\r\n  MenuItem,\r\n  Select,\r\n  FormControl,\r\n  Checkbox,\r\n  FormControlLabel,\r\n} from '@material-ui/core';\r\nimport SubTable from './SubTable';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n  },\r\n  selectEmpty: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nexport default function Register({back,next, title}) {\r\n  const classes = useStyles();\r\n  const [Header, setHeader] = useState({\r\n    MRNo: 'recID',\r\n    TokenNo: \"\",\r\n    WelfareDate: new Date(),\r\n    Profession: \"\",\r\n    Fiqa: \"\",\r\n    Education: '',\r\n    Cast: \"\",\r\n    MonthlyIncome: 0,\r\n    Guardian: \"\",\r\n    OtherInfo: \"\",\r\n    MaleKids: \"\",\r\n    FemaleKids: \"\",\r\n    OtherKids: \"\",\r\n    Brothers: \"\",\r\n    Sisters: \"\",\r\n    NoOFFamilyMembers: \"\",\r\n    IsMarried: false,\r\n    IsAbleToPay: false,\r\n    IsEarning: false,\r\n    HaveGold: false,\r\n    ReqName: '',\r\n    ReqPhone: \"\",\r\n    ReqRelationWithPatient: '',\r\n    CreateUser: \"Admin\",\r\n    ModifyUser: \"Admin\",\r\n});\r\nconst handleSubmit = () => {\r\n  next()\r\n}\r\nvar newRowsArr = [];\r\nconst [recID, setrecID] = useState('MR0000000012')\r\n    const [property, setProperty] = useState({\r\n        error: '',\r\n        open: false,   \r\n        severity: '',\r\n        viewList: false,\r\n        editList: false,\r\n        newList: true,\r\n        loadingOnSave: false,\r\n        dialogOpen: false,\r\n        locationLookup: true,\r\n        BatchLookup: true,\r\n    })\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const [ItemTable, SetItemTable] = useState(\r\n        {\r\n            columns: [\r\n                {\r\n                    title: 'Member Name', field: 'MemberName',\r\n                    cellStyle: {\r\n                        width: '25%'\r\n                    },\r\n                    render: (rowData) => (<input type=\"text\" name=\"MemberName\"/>)\r\n                },\r\n                {\r\n                    title: 'RelationWithPatient', field: 'RelationWithPatient',\r\n                    cellStyle: {\r\n                        width: '25%'\r\n                    },\r\n                    render: (rowData) => (<input type=\"text\" name=\"RelationWithPatient\"/>)\r\n                },\r\n                {\r\n                    title: 'Monthly Income', field: 'MonthlyIncome',\r\n                    cellStyle: {\r\n                        width: '25%'\r\n                    },\r\n                    render: (rowData) => (<input type=\"text\" name=\"MonthlyIncome\"/>)\r\n                },\r\n            ], rows: []\r\n        });\r\n\r\n    const AddRow = () => {\r\n        console.log(ItemTable.rows);\r\n        let arr = ItemTable.rows\r\n        let check = arr.filter((data) => {\r\n            return data.MemberName === \"\" || data.RelationWithPatient === \"\"\r\n        })\r\n\r\n        if (check.length > 0) {\r\n            setProperty({\r\n                ...property,\r\n                msg: \"Please Completely Fill Previous row\",\r\n                severity: 'error',\r\n                open: true,\r\n            });\r\n        }\r\n        else {\r\n            // setProperty({ ...property, CurrencyLookup: true })\r\n            console.log('faaa');\r\n            let Item = {\r\n                MRNo: recID,\r\n                MemberName: \"\",\r\n                RelationWithPatient: \"\",\r\n                MonthlyIncome: \"\"\r\n            }\r\n\r\n            arr.push({ ...Item })\r\n            newRowsArr = arr\r\n            SetItemTable({ ...ItemTable, rows: arr })\r\n            console.log(ItemTable.rows);\r\n        }\r\n    }\r\n    const updateTableData = (e, rowData, prop) => {\r\n        let arr = newRowsArr;\r\n        let index = arr.indexOf(rowData)\r\n        arr[index][prop] = e\r\n        SetItemTable({ ...ItemTable, rows: arr })\r\n        newRowsArr = arr\r\n    }\r\n    const onClickDelete = (rowData) => {\r\n        let arr = ItemTable.rows\r\n        let index = arr.indexOf(rowData)\r\n        arr.splice(index, 1)\r\n        SetItemTable({ ...ItemTable, rows: arr })\r\n    }\r\n\r\n  return (\r\n    <div>\r\n      <ArrowHeader next={handleSubmit} back={back} title=\"Welfare\" />\r\n    <div style={{ padding: 16, margin: 'auto', maxWidth: '80%', justifyContent:'center' }}>\r\n      <Grid container spacing={2}>\r\n        <Grid item md={4} sm={12} lg={3}>\r\n          <TextField value={Header.MRNo} id=\"MRNo\" fullWidth\r\n            type=\"text\" disabled={true}\r\n            label=\"M.R. #\"/>\r\n        </Grid>\r\n        <Grid item md={4} sm={12} lg={3}>\r\n          <TextField value={Header.TokenNo} id=\"TokenNo\" type=\"text\" fullWidth\r\n            onChange={(e) => setHeader({ ...Header, TokenNo: e.target.value })}\r\n            label=\"TokenNo\"/>\r\n        </Grid>\r\n        <Grid item md={4} sm={12} lg={3}>\r\n          <TextField id=\"WelfareDate\" label=\"Welfare Date\" type=\"date\"\r\n            value={Header.WelfareDate} fullWidth\r\n            onChange={(e) => setHeader({ ...Header, WelfareDate: e.target.value })}\r\n            InputLabelProps={{\r\n              shrink: true,\r\n            }}/>\r\n        </Grid>\r\n        <Grid item md={4} sm={12} lg={3}>\r\n          <FormControlLabel color=\"primary\"\r\n            control={<Checkbox checked={Header.IsRejected} name=\"Is Rejected\" fullWidth\r\n            onChange={e => setHeader({ ...Header, IsRejected: !Header.IsRejected })} />}\r\n            label=\"Zakaat\"\r\n          />\r\n          <FormControlLabel color=\"primary\"\r\n            control={<Checkbox checked={Header.IsRejected} name=\"Is Rejected\" fullWidth\r\n            onChange={e => setHeader({ ...Header, IsRejected: !Header.IsRejected })} />}\r\n            label=\"Donation\"\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Grid container>\r\n        <Grid sm={12}>\r\n          <Grid container spacing={2}>\r\n            <Grid item md={4} sm={12} lg={3}>\r\n              <TextField value={Header.Profession} id=\"Profession\" type=\"text\" fullWidth\r\n                onChange={(e) => setHeader({ ...Header, Profession: e.target.value })}\r\n                label=\"Profession\"/>\r\n            </Grid>\r\n            <Grid item md={4} sm={12} lg={3}>\r\n              <FormControl fullWidth>\r\n                <InputLabel  id=\"demo-simple-select-helper-label\">Education</InputLabel>\r\n                <Select \r\n                  labelId=\"demo-simple-select-helper-label\"\r\n                  id=\"Education\"\r\n                  value={Header.Education}\r\n                  onChange={(e) => setHeader({ ...Header, Education: e.target.value })}\r\n                >\r\n                  <MenuItem value=\"matriculation\">Matriculation</MenuItem>\r\n                  <MenuItem value=\" intermediate\">Intermediate</MenuItem>\r\n                  <MenuItem value=\"bachelors\">Bachelors</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n            <Grid item md={4} sm={12} lg={3}>\r\n              <FormControl fullWidth>\r\n                <InputLabel  id=\"demo-simple-select-helper-label\">Fiqa</InputLabel>\r\n                <Select \r\n                  labelId=\"demo-simple-select-helper-label\"\r\n                  id=\"Fiqa\"\r\n                  value={Header.Fiqa}\r\n                  onChange={(e) => setHeader({ ...Header, Fiqa: e.target.value })}\r\n                >\r\n                  <MenuItem value=\"shia\">Shia</MenuItem>\r\n                  <MenuItem value=\"sunni\">Sunni</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n            <Grid item md={4} sm={12} lg={3}>\r\n              <TextField value={Header.Cast} id=\"Cast\" type=\"text\" fullWidth\r\n                onChange={(e) => setHeader({ ...Header, Cast: e.target.value })}\r\n                label=\"Cast\"/>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n      <br />\r\n      \r\n      <Grid container>\r\n        <Grid sm={12}>\r\n          <Grid container spacing={4}>\r\n            <Grid item lg={7} sm={12}>\r\n              <Grid container spacing={2}>\r\n                <Grid item md={6} sm={12} lg={6}>\r\n                  <TextField value={Header.ReqName} id=\"ReqName\" type=\"text\" fullWidth\r\n                    onChange={(e) => setHeader({ ...Header, ReqName: e.target.value })}\r\n                    label=\"Requestor Name\"/>\r\n                </Grid>\r\n                <Grid item md={6} sm={12}  lg={6}>\r\n                  <FormControl fullWidth>\r\n                    <InputLabel  id=\"demo-simple-select-helper-label\">Relation With Patient</InputLabel>\r\n                    <Select \r\n                      labelId=\"demo-simple-select-helper-label\"\r\n                      id=\"ReqRelationWithPatient\"\r\n                      value={Header.ReqRelationWithPatient}\r\n                      onChange={(e) => setHeader({ ...Header, ReqRelationWithPatient: e.target.value })}\r\n                    >\r\n                      <MenuItem value=\"mother\">Mother</MenuItem>\r\n                      <MenuItem value=\"father\">Father</MenuItem>\r\n                      <MenuItem value=\"daughter\">Daughter</MenuItem>\r\n                      <MenuItem value=\"son\">Son</MenuItem>\r\n                      <MenuItem value=\"self\">Self</MenuItem>\r\n\r\n                    </Select>\r\n                  </FormControl>\r\n                </Grid>\r\n                <Grid item md={6} sm={12}  lg={6}>\r\n                  <TextField value={Header.ReqPhone} id=\"ReqPhone\" type=\"number\" fullWidth\r\n                    onChange={(e) => setHeader({ ...Header, ReqPhone: e.target.value })}\r\n                    label=\"Requestor Phone\"/>\r\n                </Grid>\r\n                <Grid item md={6} sm={12}  lg={6}>\r\n                  <TextField value={Header.Guardian} id=\"Guardian\" type=\"text\" fullWidth\r\n                    onChange={(e) => setHeader({ ...Header, Guardian: e.target.value })}\r\n                    label=\"Guardian\"/>\r\n                </Grid>\r\n                <Grid item md={6} sm={12}  lg={6}>\r\n                  <TextField value={Header.MonthlyIncome} id=\"MonthlyIncome\" type=\"number\" fullWidth\r\n                    onChange={(e) => setHeader({ ...Header, MonthlyIncome: e.target.value })}\r\n                    label=\"Monthly Income\"/>\r\n                </Grid>\r\n                <Grid item md={6} sm={12}  lg={6}>\r\n                  <TextField value={Header.OtherInfo} id=\"OtherInfo\" type=\"text\" fullWidth\r\n                    onChange={(e) => setHeader({ ...Header, OtherInfo: e.target.value })}\r\n                    label=\"Other Info\"/>\r\n                </Grid>\r\n                <Grid item sm={12} md={12} lg={12}>\r\n                <FormControlLabel color=\"primary\"\r\n                  control={<Checkbox checked={Header.IsMarried} name=\"Is Married\" fullWidth\r\n                  onChange={e => setHeader({ ...Header, IsMarried: !Header.IsMarried })} />}\r\n                  label=\"Married\"\r\n                />\r\n                <FormControlLabel color=\"primary\"\r\n                  control={<Checkbox checked={Header.HaveGold} name=\"HaveGold\" fullWidth\r\n                  onChange={e => setHeader({ ...Header, HaveGold: !Header.HaveGold })} />}\r\n                  label=\"Have Gold\"\r\n                />\r\n                <FormControlLabel color=\"primary\"\r\n                  control={<Checkbox checked={Header.IsEarning} name=\"IsEarning\" fullWidth\r\n                  onChange={e => setHeader({ ...Header, IsEarning: !Header.IsEarning })} />}\r\n                  label=\"Is Earning\"\r\n                />\r\n                <FormControlLabel color=\"primary\"\r\n                  control={<Checkbox checked={Header.IsAbleToPay} name=\"IsAbleToPay\" fullWidth\r\n                  onChange={e => setHeader({ ...Header, IsAbleToPay: !Header.IsAbleToPay })} />}\r\n                  label=\"Is Able To Pay\"\r\n                />\r\n              </Grid>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item lg={1}/>\r\n            <Grid item lg={4} sm={12}>\r\n              <Grid container spacing={2}>\r\n                <Grid item md={6} sm={12} lg={6}>\r\n                  <TextField value={Header.MaleKids} id=\"MaleKids\" type=\"number\" fullWidth\r\n                    onChange={(e) => setHeader({ ...Header, MaleKids: e.target.value })}\r\n                    label=\"No of Kids(male)\"/>\r\n                </Grid>\r\n                <Grid item md={6} sm={12}  lg={6}>\r\n                  <TextField value={Header.FemaleKids} id=\"FemaleKids\" type=\"number\" fullWidth\r\n                    onChange={(e) => setHeader({ ...Header, FemaleKids: e.target.value })}\r\n                    label=\"No of Kids(female)\"/>\r\n                </Grid>\r\n                <Grid item md={6} sm={12}  lg={6}>\r\n                  <TextField value={Header.OtherKids} id=\"OtherKids\" type=\"number\" fullWidth\r\n                    onChange={(e) => setHeader({ ...Header, OtherKids: e.target.value })}\r\n                    label=\"Other Kids\"/>\r\n                </Grid>\r\n                <Grid item md={6} sm={12}  lg={6}>\r\n                  <TextField value={Header.Brothers} id=\"Brothers\" type=\"number\" fullWidth\r\n                    onChange={(e) => setHeader({ ...Header, Brothers: e.target.value })}\r\n                    label=\"No of Brothers\"/>\r\n                </Grid>\r\n                <Grid item md={6} sm={12}  lg={6}>\r\n                  <TextField value={Header.Sisters} id=\"Sisters\" type=\"number\" fullWidth\r\n                    onChange={(e) => setHeader({ ...Header, Sisters: e.target.value })}\r\n                    label=\"No f Sisters\"/>\r\n                </Grid>\r\n                <Grid item md={6} sm={12}  lg={6}>\r\n                  <TextField value={Header.NoOFFamilyMembers} id=\"NoOFFamilyMembers\" type=\"number\" fullWidth\r\n                    onChange={(e) => setHeader({ ...Header, NoOFFamilyMembers: e.target.value })}\r\n                    label=\"Family Members\"/>\r\n                </Grid>\r\n         \r\n              </Grid>\r\n            </Grid> \r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n      <SubTable/>\r\n    </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Student-PC\\Desktop\\saylaniwork\\HPS\\client\\src\\components\\Arrowheader.js",["92","93","94","95"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ArrowLeftOutlinedIcon from '@material-ui/icons/ArrowLeftOutlined';\r\nimport ArrowRightOutlinedIcon from '@material-ui/icons/ArrowRightOutlined';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n   \r\n    \r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n \r\n\r\n}));\r\n\r\nexport default function ArrowHeader({back, next, title}) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {/* <AppBar position=\"static\">  */}\r\n      {/* <Toolbar> */}\r\n      <ArrowLeftOutlinedIcon onClick={back} style={{float:\"left\",width: \"60px\",\r\n\theight: \"50px\",\r\n\tbordertop: \"25px solid transparent\",\r\n\tborderleft:\" 50px solid #555\",\r\n\tborderbottom: \"25px solid transparent\",\r\n  marginTop:\"-12px\"\r\n  }} />\r\n          <Typography className={classes.title} variant=\"h6\" color=\"inherit\" style={{fontSize: \"2.25rem\",\r\n  fontFamily: \"Roboto, Helvetica, Arial, sans-serif\",\r\n  fontWeight: \"Bold\",\r\n  lineHeight: 1.3,\r\n  letterspacing: \"0.0075em\",\r\n  textAlign: \"center\",\r\n  color:\"#034EA2\"}} >\r\n            {title}\r\n          </Typography>\r\n         <ArrowRightOutlinedIcon onClick={next} style={{float:\"right\",width: \"60px\",\r\n\theight: \"50px\",\r\n\tbordertop: \"25px solid transparent\",\r\n\tborderleft:\" 50px solid #555\",\r\n\tborderbottom: \"25px solid transparent\",\r\n  marginTop:\"-55px\",\r\n  }}/>\r\n         {/* </Toolbar> */}\r\n    \r\n \r\n    </div>\r\n  );\r\n} ","C:\\Users\\Student-PC\\Desktop\\saylaniwork\\HPS\\client\\src\\components\\Icons\\Icons.js",[],"C:\\Users\\Student-PC\\Desktop\\saylaniwork\\HPS\\client\\src\\components\\welfare\\SubTable.js",["96"],"import React ,{ useState } from 'react'\r\nimport MaterialTable from 'material-table';\r\nimport {tableIcons} from '../Icons/Icons';\r\nexport default function SubTable() {\r\n  \r\n    const [columns, setColumns] = useState([\r\n      { title: 'Name', field: 'MemberName' },\r\n      { title: 'Surname', field: 'RelationWithPatient', initialEditValue: 'initial edit value' },\r\n      { title: 'Birth Year', field: 'MonthlyIncome', type: 'numeric' },\r\n    ]);\r\n  \r\n    const [data, setData] = useState([]);\r\n  \r\n    return (\r\n      <MaterialTable\r\n      icons={tableIcons}\r\n        // title=\"Editable Preview\"\r\n        columns={columns}\r\n        data={data}\r\n        editable={{\r\n          onRowAdd: newData =>\r\n            new Promise((resolve, reject) => {\r\n              setTimeout(() => {\r\n                setData([...data, newData]);\r\n                \r\n                resolve();\r\n              }, 1000)\r\n            }),\r\n          onRowUpdate: (newData, oldData) =>\r\n            new Promise((resolve, reject) => {\r\n              setTimeout(() => {\r\n                const dataUpdate = [...data];\r\n                const index = oldData.tableData.id;\r\n                dataUpdate[index] = newData;\r\n                setData([...dataUpdate]);\r\n  \r\n                resolve();\r\n              }, 1000)\r\n            }),\r\n          onRowDelete: oldData =>\r\n            new Promise((resolve, reject) => {\r\n              setTimeout(() => {\r\n                const dataDelete = [...data];\r\n                const index = oldData.tableData.id;\r\n                dataDelete.splice(index, 1);\r\n                setData([...dataDelete]);\r\n                \r\n                resolve()\r\n              }, 1000)\r\n            }),\r\n        }}\r\n      />\r\n    )\r\n  }",{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","severity":1,"message":"102","line":1,"column":8,"nodeType":"103","messageId":"104","endLine":1,"endColumn":12},{"ruleId":"101","severity":1,"message":"105","line":2,"column":8,"nodeType":"103","messageId":"104","endLine":2,"endColumn":16},{"ruleId":"101","severity":1,"message":"106","line":4,"column":10,"nodeType":"103","messageId":"104","endLine":4,"endColumn":16},{"ruleId":"101","severity":1,"message":"107","line":7,"column":8,"nodeType":"103","messageId":"104","endLine":7,"endColumn":16},{"ruleId":"101","severity":1,"message":"108","line":20,"column":21,"nodeType":"103","messageId":"104","endLine":20,"endColumn":31},{"ruleId":"101","severity":1,"message":"109","line":26,"column":18,"nodeType":"103","messageId":"104","endLine":26,"endColumn":25},{"ruleId":"110","severity":1,"message":"111","line":33,"column":18,"nodeType":"112","messageId":"113","endLine":33,"endColumn":20},{"ruleId":"101","severity":1,"message":"114","line":3,"column":8,"nodeType":"103","messageId":"104","endLine":3,"endColumn":14},{"ruleId":"101","severity":1,"message":"115","line":5,"column":8,"nodeType":"103","messageId":"104","endLine":5,"endColumn":20},{"ruleId":"101","severity":1,"message":"116","line":6,"column":8,"nodeType":"103","messageId":"104","endLine":6,"endColumn":16},{"ruleId":"101","severity":1,"message":"117","line":7,"column":8,"nodeType":"103","messageId":"104","endLine":7,"endColumn":12},{"ruleId":"101","severity":1,"message":"118","line":8,"column":8,"nodeType":"103","messageId":"104","endLine":8,"endColumn":15},{"ruleId":"101","severity":1,"message":"119","line":10,"column":8,"nodeType":"103","messageId":"104","endLine":10,"endColumn":15},{"ruleId":"101","severity":1,"message":"120","line":11,"column":8,"nodeType":"103","messageId":"104","endLine":11,"endColumn":18},{"ruleId":"101","severity":1,"message":"121","line":12,"column":8,"nodeType":"103","messageId":"104","endLine":12,"endColumn":18},{"ruleId":"101","severity":1,"message":"122","line":13,"column":8,"nodeType":"103","messageId":"104","endLine":13,"endColumn":17},{"ruleId":"110","severity":1,"message":"111","line":57,"column":23,"nodeType":"112","messageId":"113","endLine":57,"endColumn":25},{"ruleId":"110","severity":1,"message":"111","line":70,"column":18,"nodeType":"112","messageId":"113","endLine":70,"endColumn":20},{"ruleId":"101","severity":1,"message":"123","line":11,"column":3,"nodeType":"103","messageId":"104","endLine":11,"endColumn":11},{"ruleId":"101","severity":1,"message":"124","line":12,"column":3,"nodeType":"103","messageId":"104","endLine":12,"endColumn":19},{"ruleId":"101","severity":1,"message":"125","line":26,"column":9,"nodeType":"103","messageId":"104","endLine":26,"endColumn":16},{"ruleId":"101","severity":1,"message":"125","line":27,"column":9,"nodeType":"103","messageId":"104","endLine":27,"endColumn":16},{"ruleId":"101","severity":1,"message":"126","line":29,"column":14,"nodeType":"103","messageId":"104","endLine":29,"endColumn":20},{"ruleId":"110","severity":1,"message":"111","line":67,"column":13,"nodeType":"112","messageId":"113","endLine":67,"endColumn":15},{"ruleId":"101","severity":1,"message":"125","line":27,"column":9,"nodeType":"103","messageId":"104","endLine":27,"endColumn":16},{"ruleId":"101","severity":1,"message":"127","line":59,"column":15,"nodeType":"103","messageId":"104","endLine":59,"endColumn":23},{"ruleId":"101","severity":1,"message":"128","line":72,"column":12,"nodeType":"103","messageId":"104","endLine":72,"endColumn":19},{"ruleId":"101","severity":1,"message":"129","line":72,"column":21,"nodeType":"103","messageId":"104","endLine":72,"endColumn":31},{"ruleId":"101","severity":1,"message":"130","line":101,"column":11,"nodeType":"103","messageId":"104","endLine":101,"endColumn":17},{"ruleId":"101","severity":1,"message":"131","line":132,"column":11,"nodeType":"103","messageId":"104","endLine":132,"endColumn":26},{"ruleId":"101","severity":1,"message":"132","line":139,"column":11,"nodeType":"103","messageId":"104","endLine":139,"endColumn":24},{"ruleId":"101","severity":1,"message":"133","line":3,"column":8,"nodeType":"103","messageId":"104","endLine":3,"endColumn":14},{"ruleId":"101","severity":1,"message":"119","line":4,"column":8,"nodeType":"103","messageId":"104","endLine":4,"endColumn":15},{"ruleId":"101","severity":1,"message":"120","line":6,"column":8,"nodeType":"103","messageId":"104","endLine":6,"endColumn":18},{"ruleId":"101","severity":1,"message":"134","line":7,"column":8,"nodeType":"103","messageId":"104","endLine":7,"endColumn":16},{"ruleId":"101","severity":1,"message":"108","line":6,"column":21,"nodeType":"103","messageId":"104","endLine":6,"endColumn":31},"no-native-reassign",["135"],"no-negated-in-lhs",["136"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'ReactDOM' is defined but never used.","'Dialog' is defined but never used.","'EditIcon' is defined but never used.","'setColumns' is assigned a value but never used.","'setData' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Button' is defined but never used.","'ListItemText' is defined but never used.","'ListItem' is defined but never used.","'List' is defined but never used.","'Divider' is defined but never used.","'Toolbar' is defined but never used.","'IconButton' is defined but never used.","'Typography' is defined but never used.","'CloseIcon' is defined but never used.","'Checkbox' is defined but never used.","'FormControlLabel' is defined but never used.","'classes' is assigned a value but never used.","'setErr' is assigned a value but never used.","'setrecID' is assigned a value but never used.","'loading' is assigned a value but never used.","'setLoading' is assigned a value but never used.","'AddRow' is assigned a value but never used.","'updateTableData' is assigned a value but never used.","'onClickDelete' is assigned a value but never used.","'AppBar' is defined but never used.","'MenuIcon' is defined but never used.","no-global-assign","no-unsafe-negation"]